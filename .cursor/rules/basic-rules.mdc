---
description:
globs:
alwaysApply: false
---
# 基本ルール（Cursor Rules）

## コーディング規約
- TypeScriptの型注釈を必ず付ける（変数・関数・引数・戻り値）
- 型エイリアス（type）とインターフェース（interface）の使い分けを意識する
- any型は原則禁止（やむを得ない場合は理由をコメントで明記）
- 命名は英語・一貫性重視（型はパスカルケース、変数・関数はキャメルケース）

## ファイル・ディレクトリ構成
- セクションごとにディレクトリを分け、`src/`配下に学習用コードを配置
- 学習ログは `learning-logs/YYYY-MM/DD.md` に記録
- サンプル・演習問題は `exercises/` ディレクトリにまとめる

## コード整形・Lint
- Prettierの推奨設定を必ず適用（.prettierrc参照）
- ESLintで静的解析を行い、エラー・警告はゼロに保つ

## コメント・ドキュメント
- サンプルコードには日本語コメントで学習ポイントや注意点を明記
- 複雑な処理や例外的な実装には理由をコメントで残す
- READMEや各セクションのREADMEには「学習目標」「進め方」「参考リソース」を記載

## Git運用
- 1日ごと、または学習単位ごとにコミット
- コミットメッセージは「何を学んだか・何を修正したか」を簡潔に記述
- 不要なファイルや個人情報は `.gitignore` で除外

## 学習ログ
- 毎日「今日やったこと」「学んだこと・気づき」「次やること」「疑問・メモ」を記録
- 重要な気づきやベストプラクティスは、後で見返せるようにまとめておく

## interfaceとtypeの使い分け（表）

| 特徴・用途             | interface                        | type（型エイリアス）                |
|------------------------|----------------------------------|-------------------------------------|
| 拡張（継承）           | `extends` で拡張できる           | `&` で合成（インターセクション）    |
| 再宣言・マージ         | 可能（自動的に合成される）        | 不可（同名再宣言はエラー）          |
| オブジェクト以外の型   | 不可（基本はオブジェクト専用）    | 可能（ユニオン型・タプル・関数型等）|
| クラスでの実装         | `implements` で実装できる         | クラスで直接は実装できない          |
| 型の表現力             | オブジェクト構造に特化            | なんでも表現できる                  |
| 主な用途               | オブジェクトの設計図、API型など    | 複雑な型、合成、関数型、配列型など  |
| 実務でのおすすめ       | 設計図やAPIレスポンスはinterface   | ユニオン型や複雑な型はtype          |

## その他
- 新しい技術やパターンを導入する際は、学習ログやREADMEに理由や比較を記録
- 疑問点やエラーは積極的に記録し、解決策も追記
