# TypeScript + Next.js 学習プロジェクト

PHP/Laravelバックエンド開発者からフルスタック開発者へのキャリアアップを目指す学習リポジトリです。TypeScriptとNext.jsを段階的に学習し、最終的にはバッチ処理可視化ダッシュボードを構築します。

## 学習目標

- TypeScriptの基本から実践的な型パターンまでの習得
- ReactコンポーネントのTypeScript対応スキル獲得
- Next.jsでのフルスタックアプリケーション開発能力の習得
- PHPバックエンド開発の経験を活かしたフロントエンド開発スキルの開発
- バッチ処理管理の知見を活かした実用的なダッシュボードの構築

## 学習計画

### 2025年6月: TypeScript基礎の確立

- **第1週 (6/2～6/8)**: TypeScript入門
  - 開発環境セットアップ
  - 基本構文と型アノテーション
  - プリミティブ型、配列、オブジェクト型

- **第2週 (6/9～6/15)**: TypeScriptの高度な機能
  - インターフェースとクラス
  - TypeScriptとPHP/Laravelのクラス構造比較
  - ユニオン型、インターセクション型、型エイリアス

- **第3週 (6/16～6/22)**: 実務的な型パターンとReact基礎
  - ジェネリクスとユーティリティ型
  - React基本コンポーネントの型付け
  - イベントハンドラの型付け

- **第4週 (6/23～6/29)**: React HooksとTypeScript
  - useState/useEffectの型付け
  - useRef/useCallback/useMemoの型付け
  - カスタムフックの作成と型定義

### 2025年7月: Next.jsとアプリケーション構造

- **第1週 (7/1～7/6)**: Next.js入門
  - Next.jsプロジェクト構築
  - ディレクトリ構造とページルーティング
  - 簡単なページの作成と遷移

- **第2週 (7/7～7/13)**: Next.jsのデータ取得
  - getStaticProps/getStaticPaths
  - getServerSideProps
  - SWRによるクライアントサイドデータフェッチング

- **第3週 (7/14～7/20)**: API Routesとプロジェクト構造
  - APIエンドポイント作成
  - タイプセーフなAPIハンドラ
  - フロントエンド・バックエンド間の型共有

- **第4週 (7/21～7/27)**: コンポーネント設計と状態管理
  - Atomic Designの応用
  - コンポーネント分割の判断基準
  - SWR/React Queryによる状態管理

### 2025年8月: ダッシュボードプロジェクト開発

- **第1週 (8/4～8/10)**: バッチジョブモデル設計
  - データモデルの詳細設計
  - APIインターフェース設計
  - ダッシュボードレイアウト基本実装

- **第2週 (8/11～8/17)**: データ可視化コンポーネント
  - recharts/Chart.jsの活用
  - バッチジョブ実行時間グラフ
  - 成功率・失敗率のチャート

- **第3週 (8/18～8/24)**: CRUD機能とリアルタイム更新
  - バッチジョブのCRUD API
  - フォーム実装とバリデーション
  - SWRでのリアルタイム更新

- **第4週 (8/25～8/31)**: フィルタリングと検索機能
  - 検索インターフェース
  - タイプセーフなフィルター
  - ソート機能とページネーション

### 2025年9月: 完成と品質向上

- **第1週 (9/1～9/7)**: レスポンシブデザインと最適化
  - モバイルビュー最適化
  - パフォーマンス分析と改善
  - アクセシビリティ対応

- **第2週 (9/8～9/14)**: テストと品質向上
  - Jest/React Testing Library導入
  - コンポーネントテスト
  - API機能のテスト

- **第3週 (9/15～9/21)**: デプロイと自動化
  - Vercel/Netlifyデプロイ
  - GitHub Actions設定
  - CI/CDパイプライン構築

- **第4週 (9/22～9/28)**: ポートフォリオとしての完成
  - 最終調整とリファクタリング
  - ドキュメント整備
  - 技術的意思決定の文書化

## リポジトリ構造